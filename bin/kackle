#!/bin/bash
set -euo pipefail

if [[ $(uname) == "Darwin" ]];then
    PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
fi

command -v pandoc >/dev/null 2>&1 || { echo >&2 "I require Pandoc but it's not installed.  Aborting."; exit 1; }

### GLOBAL VALUES
PROD=1

#####
# Print Usage Documents
# Arguments:
#   If varliable $1 is set, print long help
#####
usage(){
    echo "USAGE: [-vhd] -b TARGET [-e THEME.html] [-o OUTPUT]"
    echo "              -r TARGET [-T TITLE] [-o OUTPUT]"
    echo "              -f SRC [-t] [-N SITENAME] [-x FOLDER] [-o OUTPUT]"
    echo "              -p"
    if [[ -z ${1:-} ]];then
        return
    fi
    echo
    echo "Content Generation"
    echo " -b folder : Build target folder"
    echo " -r folder : Build blogroll of target folder"
    echo " -f folder : Finalize folder for deployment by writing out robots.txt, sitemap.xml, and compresses folder"
    echo " -p        : Creates new post based on defaults and user answers"
    echo
    echo "Content Generators Options"
    echo " -N title  : Sitename for sitemap generator"
    echo " -T title  : Set title for blogroll"
    echo " -t        : Test settings for -f flag. Disables compression and restrictive robots.txt"
    echo " -x folder : Exclude folders from sitemap. Option can be repeated."
    echo
    echo "Input/Output Settings"
    echo " -o folder : Set output folder (Default: out/)"
    echo " -e file   : Set theme file (Default: theme/base.html)"
    echo
    echo "Usage and Debug"
    echo " -h        : Show help menu"
    echo " -v        : Set Verbose"
    echo " -d        : Set Bash debug mode"
}

new-post(){
    default_location="drafts"
    default_author="Ethan House"

    read -p "Name of page: " p_title
    read -p "Location of page [$default_location]: " p_location
    read -p "Author [$default_author]: " p_author

    # Sets defaults if given value is NULL
    p_location=${p_location:-$default_location}
    p_author=${p_author:-$default_author}
    p_date=$(gdate +"%B %d, %Y")

    # Ensures no illegal/bad characters are written to disk
    p_ondisk=$(echo $p_title | tr " " - | tr '[:upper:]' '[:lower:]' | perl -p -e  's/[^A-Za-z0-9\-\.]//g;')

    # Ensures html safe encodings are used
    p_title=$(echo $p_title | perl -n -mHTML::Entities -e ' ; print HTML::Entities::encode_entities($_) ;')

    p_file="src/$p_location/$p_ondisk.md"

    if [[ ! -d $(dirname $p_file) ]];then
        echo "Folder $(pwd)/$(dirname $p_file) doesn't exist. Can't Create $p_file"
        exit 1
    fi

    # Writes out template for new blog post
    echo "$p_title:$p_date:$p_author" | awk \
        'BEGIN  {FS=":"; OFS="\n"}
                { printf "---\ntitle: %s\ndate: %s\nauthor: %s\nsummary: %s\n---", $1, $2, $3, "Example Blog Post" }
        END     { print "\nContent of my super awesome blog post!" }' >> $p_file

    echo "File $(pwd)/$p_file Created Successfully"
}

##########
# Compiles folder and sends to output location
# Arguments:
#   Source folder to be built
#   Output folder
##########
compile-folder() {
    local SRC=$1
    local OUT=$2

    local MD_FILES=($(find -L $SRC -name "*.md"))
    local BLD_FILES=($(sed "s@src@"${OUT}"@g;s@\.md@\.html@g" <<< ${MD_FILES[@]}))

    if ! [[ -f $THEME ]]; then
        echo "Missing $THEME file"
        exit 1
    fi

    for ((i=0; i<${#BLD_FILES[@]};++i)); do
        mkdir -p $(dirname "${BLD_FILES[i]}")
        if [[ "${MD_FILES[i]}" -nt "${BLD_FILES[i]}" ]] || [[ "$THEME" -nt "${BLD_FILES[i]}" ]];then
            pandoc --template $THEME "${MD_FILES[i]}" -o "${BLD_FILES[i]}"
            printf " BUILD %s -> %s\n" "${MD_FILES[i]}" "$(readlink -f ${BLD_FILES[i]})"
        fi
    done

    project_dest=$(sed "s/src/out/g" <<< $SRC)

    rsync -qrvzcl --delete "./static/"* "$project_dest"
    printf " COPY %s -> %s\n" "./static/" "$(readlink -f $project_dest)"
}

function format-page {
    echo -e "---"
    for i in "$@";do
        echo -e "$i"
    done
    echo -e "---\n"
}

##########
# Extract YAML headers from file
#
# Arguments:
#   Path to file
# Returns:
#   Prints formatted YAML to STDOUT
##########
extract-headers(){
    awk -F ':' \
    '/title:/    { title = $2 }
    /author:/   { author = $2 }
    /date:/     { ("date +\"%B %d, %Y\" -d\x27"$2"\x27" | getline date) }
    /summary:/  { summary = $2 }

    END         { printf "%s:%s:%s:%s:%s\n", date, title, author, summary, FILENAME }' $1
}

##########
# Create blogroll index of a folder.
#   Requires properly formatted YAML headers
# Arguments:
#   Source folder to build
##########
create-blogroll() {
    local src="$1"
    local title="$3"

    rm -f $src/index.md

    local readonly TMPFILE=$(mktemp)
    format-page "title: $title" > $TMPFILE
    for f in "$src"/*.md;do
        #./scripts/extract_headers.awk "$f"
        extract-headers "$f"
    done | sort -k3nr -k1Mr -k2nr | sed "s@$(dirname $src)/@@g" | awk -F ':' \
    '{ gsub(".md",".html");
    printf "<h4 class=\"blog-roll\"> [%s](/%s) </h4>\n", $2, $5
    printf "<ul><li style=\"display:inline-block;margin-right:1em;\">_Written by %s_</li><li style=\"display:inline-block;margin-right:1em;\"><time>Posted on %s</time></li></ul>\n\n", $3, $1
    if ($3)
        printf "%s\n\n", $4
    print "---\n"}' | head -n -2 >> $TMPFILE

    cp $TMPFILE $src/index.md
    printf " CREATE index.md -> %s\n" "$(readlink -f $src/index.md)"
}

##########
# Finalize webdir for deployment
#   If -t is set then robots.txt blocks entire site and nothing is compressed.
#   else robots.txt blocks /drafts and everything is compressed using htmlcompressor.
# Arguments:
#   Source folder to compress
#   Sitename for sitemap.xml
##########
finalize-webdir() {
    local target=$1
    local sitename=$2
    local AWK_SCRIPT=\
'BEGIN { print "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \
        <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" \
        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \
        xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 \
        http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">" }
    { printf "<url>\n\t<loc>%s</loc>\n\t<changefreq>weekly</changefreq>\n</url>\n", $NF }
END { print "</urlset>"}'

    find $target -name "*.html" | sed "s@$target/@https://$sitename/@g" | awk -F"\n" \
        "$AWK_SCRIPT" > $target/sitemap.xml

    printf " CREATE sitemap.xml -> %s\n" "$(readlink -f $target/sitemap.xml)"

    if (("$PROD")) ;then
        echo -e "User-Agent: *\nDisallow: /drafts/" > "$target/robots.txt"
        printf " CREATE PROD robots.txt -> %s\n" "$(readlink -f $target/robots.txt)"
    else
        echo -e "User-Agent: *\nDisallow: /" > "$target/robots.txt"
        printf " CREATE DEV robots.txt -> %s\n" "$(readlink -f $target/robots.txt)"
    fi

    if (("$PROD"))  && [[ ! -z $(command -v htmlcompressor) ]];then
        printf " COMPRESSING %s\n" "$(readlink -f $target)"
        command -v htmlcompressor >/dev/null 2>&1 || { echo >&2 "htmlcompressor required to compress $target folder!"; exit 1; }
        find -L "$target" \( -name "*.html" -or -name "*.css" \) -exec htmlcompressor --compress-js --compress-css {} -o {} \;
    fi
}

main() {

    ##### Kackle Arguments Descriptions
    ### Debug and Usage Docs
    # h  - Prints Usages Docs
    # v  - Enable Verbose Mode
    # d  - Enable Debug Mode
    ### Outputs or Generates Content
    # b: - Builds Folder. Takes Valid Path
    # r: - Builds Blogroll on Folder. Takes Valid Path
    # f: - Finalize Folder for Deployment, generates robots.txt and sitemap. Takes Valid Path
    # p  - Creates New Blog Post
    ### Settings for Content Generation
    # T: - Sets Title for Blogroll.
    # N: - Sets Sitename for Sitemap Generation.
    # x: - Sets folder exclude from Sitemap.
    #   Not Implemented
    # t: - Sets Testing State for Deployment. Sets robots.txt to block everything.
    ### Kackle Input/Output Settings
    # e: - Set Site Theme File Location.
    # o: - Sets output folder. Takes Valid Path
    #####
    while getopts ":hvdpo:b:r:t:T:N:x:f:e:" opt; do
        case $opt in
            p)
                new-post
                exit 0
                ;;
            h)
                # Print Usage
                usage "long"
                exit 0
                ;;
            v)
                # Verbose Mode
                set -v
                ;;
            d)
                # Debug Mode
                set -x
                ;;
            t)
                # Set prod state
                PROD=0
                ;;
            o)
                # Set output folder
                OUTPUT="$OPTARG"
                readonly OUTPUT
                ;;
            e)
                # Set Theme
                THEME="$OPTARG"
                ;;
            f)
                # Finialize folder for deployment
                : ${TASK:="f"}
                : ${TARGET:="$OPTARG"}
                readonly TASK
                readonly TARGET
                ;;
            b)
                # Build Folder
                : ${TASK:="b"}
                : ${TARGET:="$OPTARG"}
                readonly TASK
                readonly TARGET
                ;;
            r)
                # Create Blogroll
                : "${TASK:=r}"
                : "${TARGET:=$OPTARG}"
                readonly TASK
                readonly TARGET
                ;;
            T)
                # Set title for blogroll
                readonly BLOGROLL_TITLE="$OPTARG"
                ;;
            N)
                # Set sitename for Sitemap Generator
                readonly SITENAME="$OPTARG"
                ;;
            x)
                # Exclude folder from build process
                EXCLUDE+=( $OPTARG )
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                usage
                exit 1
                ;;
        esac
    done

    # Print Usage if no build command provided
    if [[ -z ${TASK:-} ]]; then
        usage
        exit
    fi

    ### SET DEFAULTS AND READONLY STATUS
    : "${OUTPUT:=out/}"
    : "${THEME:=./theme/base.html}"
    readonly OUTPUT
    readonly THEME

    # Test if target is a folder
    if ! [[ -d $TARGET ]]; then
        echo "$TARGET must be a folder"
        exit 1
    fi

    # Run Build Commands
    if [[ ${TASK:-} == "b" ]]; then
        compile-folder $TARGET $OUTPUT

    elif [[ ${TASK:-} == 'r' ]]; then
        create-blogroll "$TARGET" "$OUTPUT" "${BLOGROLL_TITLE:-Blog Posts}"

    elif [[ ${TASK:-} == 'f' ]]; then
        if [[ -z ${SITENAME:-} ]];then
            echo "Sitename required for finalization"
            exit 1
        fi
        finalize-webdir $TARGET $SITENAME
    fi
}

main "$@"
