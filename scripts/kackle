#!/bin/bash -euo pipefail

if [[ $(uname) == "Darwin" ]];then
    PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
fi

### GLOBAL VALUES
PROD=0

usage(){
    echo "USAGE: [-vhdp] [-t THEME/FILE.html] [-b TARGET |-r TARGET |-s TARGET -b SITENAME] [-o output]"
    echo "Page Generation"
    echo " -b  : Build target folder assumes"
    echo " -r  : Build blogroll of target folder"
    echo " -s  : Generate sitemap of TARGET"
    echo "Optional"
    echo " -o  : Set output folder (Default: out/)"
    echo " -t  : Set theme file (Default: theme/base.html)"
    echo " -p  : Build project with prod settings"
    echo " -n  : Sitename for sitemap generator"
    echo " -h  : Show help menu"
    echo " -v  : Set Verbose"
    echo " -d  : Set Bash debug mode"
}

##########
# Compiles folder and sends to output location
# Arguments:
#   Source folder to be built
#   Output folder
##########
compile-folder() {
    local SRC=$1
    local OUT=$2

    local MD_FILES=($(find -L $SRC -name "*.md"))
    local BLD_FILES=($(sed "s@src@"${OUT}"@g;s@\.md@\.html@g" <<< ${MD_FILES[@]}))

    if ! [[ -f $THEME ]]; then
        echo "Missing $THEME file"
        exit 1
    fi

    for ((i=0; i<${#BLD_FILES[@]};++i)); do
        mkdir -p $(dirname "${BLD_FILES[i]}")
        pandoc --template $THEME "${MD_FILES[i]}" -o "$(readlink -f ${BLD_FILES[i]})"
        printf " BUILD %s -> %s\n" "${MD_FILES[i]}" "$(readlink -f ${BLD_FILES[i]})"
    done

    project_dest=$(sed "s/src/out/g" <<< $SRC)

    rsync -qrvzcl --delete "$SRC/static/"* "$project_dest"
    printf " COPY %s -> %s\n" "$SRC/static/" "$(readlink -f $project_dest)"

    if (("$PROD")) ;then
        echo -e "User-Agent: *\nDisallow: /drafts/" > "$project_dest/robots.txt"
        printf " CREATE PROD robots.txt -> %s\n" "$(readlink -f $project_dest/robots.txt)"
    else
        echo -e "User-Agent: *\nDisallow: /" > "$project_dest/robots.txt"
        printf " CREATE DEV robots.txt -> %s\n" "$(readlink -f $project_dest/robots.txt)"
    fi
}

function format-page {
    echo -e "---"
    for i in "$@";do
        echo -e "$i"
    done
    echo -e "---\n"
}

##########
# Create blogroll index of a folder.
#   Requires properly formatted YAML headers
# Arguments:
#   Source folder to build
##########
create-blogroll() {
    local SRC=$1

    rm -f $SRC/index.md

    TMPFILE=$(mktemp)
    format-page "title: Blog Posts" > $TMPFILE
    for f in "$SRC"/*.md;do
        ./scripts/extract_headers.awk "$f"
    done | sort -k3nr -k1Mr -k2nr | sed "s@$(dirname $SRC)/@@g" | awk -F ':' \
    '{ gsub(".md",".html");
    printf "<h4 class=\"blog-roll\"> [%s](/%s) </h4>\n", $2, $5
    printf "<ul><li style=\"display:inline-block;margin-right:1em;\">_Written by %s_</li><li style=\"display:inline-block;margin-right:1em;\"><time>Posted on %s</time></li></ul>\n\n", $3, $1
    if ($3)
        printf "%s\n\n", $4
    print "---\n"}' | head -n -2 >> $TMPFILE

    cp $TMPFILE $SRC/index.md
    printf " CREATE index.md -> %s\n" "$(readlink -f $SRC/index.md)"
}

##########
# Creates a sitemap of every HTML file within the directory. Places within src folder.
# Arguments:
#   Name of Generated Site
#   Source folder to build from
##########
create-sitemap() {
    local sitename=$1
    local src=$2

    local AWK_SCRIPT=\
'BEGIN { print "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \
        <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" \
        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \
        xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 \
        http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">" }
    { printf "<url>\n\t<loc>%s</loc>\n\t<changefreq>weekly</changefreq>\n</url>\n", $NF }
END { print "</urlset>"}'

    find $src -name "*.html" | sed "s@$src/@https://$sitename/@g" | awk -F"\n" \
        "$AWK_SCRIPT" > $src/sitemap.xml

    printf " CREATE sitemap.xml -> %s\n" "$(readlink -f $src/sitemap.xml)"
}

main() {
    while getopts ":hvdpo:b:r:s:t:n:x:" opt; do
        case $opt in
            h)
                # Print Usage
                usage
                exit 0
                ;;
            v)
                # Verbose Mode
                set -v
                ;;
            d)
                # Debug Mode
                set -x
                ;;
            p)
                # Set prod state
                PROD=1
                ;;
            o)
                # Set output folder
                OUTPUT="$OPTARG"
                readonly OUTPUT
                ;;
            t)
                # Set Theme
                THEME="$OPTARG"
                ;;
            b)
                # Build Folder
                : ${TASK:="b"}
                : ${TARGET:="$OPTARG"}
                readonly TASK
                readonly TARGET
                ;;
            r)
                # Create Blogroll
                : "${TASK:=r}"
                : "${TARGET:=$OPTARG}"
                readonly TASK
                readonly TARGET
                ;;
            s)
                # Create Sitemap
                : "${TASK:=s}"
                : "${TARGET:=$OPTARG}"
                readonly TASK
                readonly TARGET
                ;;
            n)
                # Set sitename for Sitemap Generator
                readonly SITENAME="$OPTARG"
                ;;
            x)
                # Exclude folder from build process
                EXCLUDE+=( $OPTARG )
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                usage
                exit 1
                ;;
        esac
    done

    # Print Usage if no build command provided
    if [[ -z ${TASK:-} ]]; then
        usage
        exit
    fi

    ### SET DEFAULTS AND READONLY STATUS
    : "${OUTPUT:=out/}"
    : "${THEME:=$TARGET/theme/base.html}"
    readonly OUTPUT
    readonly THEME

    # Test if target is a folder
    if ! [[ -d $TARGET ]]; then
        echo "$TARGET must be a folder"
        exit 1
    fi

    # Run Build Commands
    if [[ ${TASK:-} == "b" ]]; then
        compile-folder $TARGET $OUTPUT

    elif [[ ${TASK:-} == 'r' ]]; then
        create-blogroll $TARGET $OUTPUT

    elif [[ ${TASK:-} == 's' ]]; then
        if [[ -z ${SITENAME:-} ]];then
            echo "Sitename required for sitemap generator"
            exit 1
        fi
        create-sitemap $SITENAME $TARGET
    fi
}

main "$@"
